SQL> 
SQL> set serveroutput on
SQL> set echo on
SQL> 
SQL> --Jonathan Hand
SQL> --IS 480
SQL> --Final Project
SQL> 
SQL> create or replace Package Enroll as
  2  --just addme and drop me in spec
  3  --procedure DropMe
  4  
  5  	 procedure AddMe
  6  	     (p_snum students.snum%type,
  7  	     p_CallNum schClasses.callnum%type,
  8  	     p_errorMsg OUT varchar2);
  9  	 procedure DropMe
 10  	     (p_snum students.snum%type,
 11  	     p_CallNum schClasses.callnum%type);
 12  
 13  end Enroll;
 14  /

Package created.

SQL> show errors;
No errors.
SQL> create or replace Package body Enroll as
  2  -----------------------------------ADD ME PROCEDURES--------------------------------
  3  	 procedure check_snum
  4  	     (p_snum students.snum%type,
  5  	     p_answer IN OUT varchar2) as --out keyword to let know being passed out of procedure
  6  	     v_count number;
  7  
  8  	 begin
  9  	     select count(snum) into v_count
 10  	     from students
 11  	     where snum = p_snum;
 12  	     if v_count = 0 then
 13  		 p_answer:= p_answer || 'Invalid Student Number, ';
 14  
 15  	     end if;
 16  	 end;
 17  
 18  	 PROCEDURE check_CALLNUM
 19  	     (p_callnum schclasses.callnum%type,
 20  	     p_answer IN OUT varchar2) as
 21  	     v_count number;
 22  
 23  	 begin
 24  	     select count(*) into v_count
 25  	     from schclasses
 26  	     where callnum = p_callnum;
 27  	     if v_count = 0 then
 28  		 p_answer := p_answer || 'Invalid Call Number, ';
 29  	     end if;
 30  	 end;
 31  
 32  	 procedure check_15hr
 33  	     (p_snum students.snum%type,
 34  	     p_CallNum schClasses.callnum%type, p_answer IN OUT varchar2) as
 35  	     v_stuStanding number;
 36  	     v_courseStanding number;
 37  	     v_creditEnrolled number;
 38  	     v_creditWant number;
 39  	 begin
 40  	 /*
 41  	 --this is for comparing standing TODO: Take out later
 42  	     select standing into v_stuStanding
 43  	     from students
 44  	     where sNum = p_snum;
 45  
 46  	     select standing into v_courseStanding
 47  	     from schclasses s, courses c
 48  	     where p_callNum = s.callnum and c.dept=s.dept and c.cnum = s.cnum;
 49  */
 50  	     select nvl(sum(c.CRHR), 0) into v_creditEnrolled
 51  	     from courses c, enrollments e, schclasses s
 52  	     where c.dept=s.dept and c.cnum = s.cnum and e.callnum = s.callnum and e.snum = p_snum;
 53  
 54  	     select c.crhr into v_creditWant
 55  	     from courses c, schclasses s
 56  	     where p_callnum = s.callnum and c.dept=s.dept and c.cnum = s.cnum;
 57  
 58  	     if (v_creditEnrolled + v_creditWant) > 15 then
 59  		 p_answer := p_answer || 'Too many units to register, ';
 60  	     end if;
 61  	 end;
 62  
 63  	 procedure doubleEnrollment
 64  	     (p_snum students.snum%type,
 65  	     p_CallNum schClasses.callnum%type, p_error IN OUT varchar2) as
 66  	     v_enrDept varchar2(10);
 67  	     v_enrCnum varchar2(10);
 68  
 69  	     cursor cur_class is
 70  		 select s.callNum, s.dept, s.cnum, s.section
 71  		 from schClasses s, enrollments e
 72  		 where e.snum = p_snum and s.callnum = e.callnum;
 73  
 74  	 begin
 75  	     select dept into v_enrDept
 76  	     from schClasses
 77  	     where callnum = p_callNum;
 78  
 79  	     select Cnum into v_enrCnum
 80  	     from schClasses
 81  	     where callnum = p_callNum;
 82  
 83  
 84  	     for eachClass in cur_class loop
 85  		 if (v_enrDept = eachClass.dept and v_enrCnum = eachClass.Cnum) then
 86  		     p_error := p_error || 'Enrolled in another section already, ';
 87  		     exit;
 88  		 end if;
 89  	     end loop;
 90  	 end;
 91  
 92  	 procedure repeatEnrollment
 93  	     (p_snum students.snum%type,
 94  	     p_CallNum schClasses.callnum%type, p_error IN OUT varchar2) as
 95  
 96  	     cursor cur_enr is
 97  		 select s.callNum, e.snum
 98  		 from schClasses s, enrollments e
 99  		 where e.snum = p_snum and s.callnum = e.callNum;
100  
101  	 begin
102  	     for eachEnr in cur_enr loop
103  		 if (eachEnr.callNum = p_callNum) then
104  		     p_error := p_error || 'Repeat Enrollment, ';
105  		     exit;
106  		 end if;
107  	     end loop;
108  	 end;
109  
110  	 --select standing from students, compare to course want to enroll standing
111  	 --(join courses and schclasses)
112  	 procedure standingRequirement
113  	     (p_snum students.snum%type,
114  	     p_CallNum schClasses.callnum%type, p_error IN OUT varchar2) as
115  	     v_stuStanding number(1);
116  	     v_courseStanding number(1);
117  
118  	 begin
119  	     select standing into v_stuStanding
120  	     from students
121  	     where students.snum = p_snum;
122  
123  	     select c.standing into v_courseStanding
124  	     from courses c, schClasses sch
125  	     where sch.callnum = p_callNum and sch.Dept = c.Dept and sch.Cnum = c.cNum;
126  
127  	     if v_stuStanding < v_courseStanding then
128  		 p_error := p_error || 'Student standing too low, ';
129  	     end if;
130  	 end;
131  
132  	 procedure undeclaredMajor
133  	     (p_snum students.snum%type,
134  	     p_CallNum schClasses.callnum%type, p_error IN OUT varchar2) as
135  	     v_stuStanding number(1);
136  	     v_stuMajor students.Major%type;
137  
138  	 begin
139  	     select standing into v_stuStanding
140  	     from students
141  	     where students.snum = p_snum;
142  
143  	     select major into v_stuMajor
144  	     from students
145  	     where students.snum = p_snum;
146  
147  	     if (v_stuStanding >= 3) then
148  		 if (v_stuMajor is null) then
149  		     p_error := p_error || 'Need to declare major to enroll, ';
150  		 end if;
151  	     end if;
152  
153  	 end;
154  
155  	 procedure check_capacity
156  	     (p_snum students.snum%type,
157  	     p_callnum schClasses.callnum%type,
158  	     p_answer IN OUT varchar2,
159  	     p_full IN OUT boolean) AS
160  	     v_capacity number(3);
161  	     v_reservedG number(3);
162  	     v_reservedN number(3);
163  	     v_reserved number(3);
164  
165  	 begin
166  	     select sch.capacity into v_capacity
167  	     from schClasses sch
168  	     where p_callnum = sch.callnum;
169  
170  	     select count(e.callnum) into v_reservedG
171  	     from enrollments e, schClasses sch
172  	     where sch.callnum = e.callnum and e.callnum = p_callnum and e.grade != 'W';
173  
174  	     select count(e.callnum) into v_reservedN
175  	     from enrollments e, schClasses sch
176  	     where sch.callnum = e.callnum and e.callnum = p_callnum and e.grade is null;
177  
178  	     v_reserved := v_reservedG + v_reservedN;
179  
180  	     if (v_reserved >= v_capacity) then
181  		 p_answer := p_answer || 'Class is full, ';
182  		 p_full := true;
183  	     end if;
184  	 end;
185  
186  	 procedure checkWaitlist
187  	     (p_snum students.snum%type,
188  	     p_callnum schClasses.callnum%type,
189  	     p_answer IN OUT varchar2,
190  	     p_waitlisted IN OUT boolean) as
191  	     v_onWaitList number(1);
192  
193  	 begin
194  	     p_waitListed := false;
195  	     select count(snum) into v_onWaitList
196  	     from waitlist
197  	     where snum = p_snum and callnum = p_callnum;
198  
199  	     if (v_onWaitList > 0) then
200  		 p_waitlisted := true;
201  		 dbms_output.put_line('Already on the waitlist for course number ' || p_callNum || '.');
202  	     end if;
203  	 end;
204  
205  	 procedure addToWaitList
206  	     (p_snum students.snum%type,
207  	     p_callnum schClasses.callnum%type) as
208  	 begin
209  	     insert into waitlist values (p_snum, p_callnum, (select current_timestamp from dual));
210  	     dbms_output.put_line('Student number ' || p_snum || ' is now on the waiting list for class number ' || p_callNum || '.');
211  	 end;
212  
213  
214  ---------------------------ADD ME MAIN---------------------------------------------------
215  	 procedure AddMe
216  	 (p_snum students.snum%type,
217  	 p_CallNum schClasses.callnum%type,
218  	 p_errorMsg OUT varchar2) as
219  	 v_errors varchar2(1000);
220  	 v_full boolean;
221  	 v_waitlisted boolean;
222  
223  	 begin
224  	     --num1
225  	     check_snum(p_snum, v_errors); --check valid student number
226  	     check_callnum(p_CallNum, v_errors); --check valid call number
227  	     if (v_errors is null) then
228  		 --num2
229  		 repeatEnrollment(p_snum, p_callnum, v_errors);
230  		     --check enrollments if snum already enrolled in callnum (past or present)
231  		 --num3
232  		 doubleEnrollment(p_snum, p_callNum, v_errors);
233  		     --cursor to loop through all of enrollments where snum = student.snum
234  		     --for each record:
235  			 --check schclasses.dept and cnum does not match p_callnum dept and cnum
236  			 --if matches, add to v_error message
237  		 --num4
238  		 check_15hr(p_snum, p_callNum, v_errors); --check enrolling will not exceed 15 credits for student
239  		 --num5
240  		     --select standing from students, compare to course want to enroll standing (join courses and schclasses)
241  		 standingRequirement(p_snum, p_callNum, v_errors);
242  		 --num6
243  		 undeclaredMajor(p_snum, p_callNum, v_errors);
244  		     --select standing from students
245  		     --if standing 3 or 4 then
246  			 --check students.major not null
247  			 --if major null
248  			     --error
249  		 --num7
250  		 --if (v_errors is null) then
251  
252  
253  		 --TODO: num8
254  
255  			     --check if stunum on waitlist table
256  			     --num9
257  				 --if not on waitlist with that call num then
258  				     --insert into waitlist table
259  				     --print stu num is now on wait list
260  				 --else
261  				     --print you're already waitlisted for that
262  
263  		 --end if;
264  		-- if (v_errors is not null) then
265  		     --checkWaitlist
266  
267  		 if (v_errors is null) then
268  		 check_capacity(p_snum, p_callnum, v_errors, v_full);
269  		     if(v_full = true) then
270  			 --num8
271  			 checkWaitlist(p_snum, p_callnum, v_errors, v_waitlisted);
272  			 if (v_waitlisted = false) then
273  			     addToWaitList(p_snum, p_callNum);
274  			 end if;
275  		     else
276  			 insert into enrollments (snum, callnum) values (p_snum, p_callnum);
277  			 dbms_output.put_line('Successfully Enrolled!');
278  			 commit;
279  		     end if;
280  		 else
281  		     dbms_output.put_line(v_errors);
282  		 end if;
283  	     else --num1: if snum and/or callnum invalid, skip to here
284  		 dbms_output.put_line(v_errors); --skip rest of program and print errors
285  	     end if;
286  	 end;
287  ----------------------DROP ME PROCEDURES-----------------------------------------------------------
288  	 procedure notEnrolled
289  	     (p_snum students.snum%type,
290  	     p_callnum schClasses.callnum%type,
291  	     p_errors IN OUT varchar2) as
292  	     v_enrollmentCount number(1);
293  	 begin
294  	     select count(snum) into v_enrollmentCount
295  	     from enrollments
296  	     where snum = p_snum and callNum = p_callNum; --add to not count 'W', because means dropped, so they can retake
297  
298  	     if (v_enrollmentCount != 1) then
299  		 p_errors := p_errors || 'Not currently enrolled in that course, ';
300  	     end if;
301  	 end;
302  
303  	 procedure alreadyGraded
304  	     (p_snum students.snum%type,
305  	     p_callnum schClasses.callnum%type,
306  	     p_errors IN OUT varchar2) as
307  	     v_grade varchar(1);
308  
309  	 begin
310  	     select grade into v_grade
311  	     from enrollments
312  	     where snum = p_snum and callnum = p_callnum;
313  
314  	     if (v_grade is not null) then
315  	     p_errors := p_errors || 'Grade already inputted cannot drop, ';
316  	     end if;
317  	 end;
318  
319  	 procedure dropCourse
320  	     (p_snum students.snum%type,
321  	     p_callnum schClasses.callnum%type,
322  	     p_errors IN OUT varchar2) as
323  	     v_waitListNum number(3);
324  	     v_addError varchar2(1000);
325  
326  		 cursor cur_waitlist is
327  		 select w.snum, w.callnum, waitlistTime
328  		 from waitlist w
329  		 where w.callnum = p_callnum
330  		 order by waitlistTime asc;
331  
332  	 begin
333  	     --update enrollments
334  	     --set grade = 'W'
335  	     --where snum = p_snum and callnum = p_callnum;
336  	     --dbms_output.put_line('grade updated');
337  
338  	     select count(snum) into v_waitlistNum
339  	     from waitlist
340  	     where callnum = p_callnum;
341  	     dbms_output.put_line('waitlist count for course is ' || v_waitListNum);
342  
343  	     if (v_waitlistNum > 0) then
344  		 for student in cur_waitList loop
345  		     --v_addError := null;
346  		     dbms_output.put_line('trying to add... ' || student.snum || ' ' || student.callnum);
347  		     --addme(student.snum,student.callnum, v_addError);
348  		    -- if (v_addError is null) then
349  		       -- exit;
350  		     --end if;
351  		 end loop;
352  	     end if;
353  	 end;
354  ---------------------------DROP ME MAIN--------------------------------------------
355  	 procedure DropMe
356  	     (p_snum students.snum%type,
357  	     p_CallNum schClasses.callnum%type) as
358  	     v_errors varchar2(1000);
359  
360  	 begin
361  	     --num1
362  	     check_snum(p_snum, v_errors); --check valid student number
363  	     check_callnum(p_CallNum, v_errors); --check valid call number
364  	     if (v_errors is null) then
365  	     --num2
366  		 notEnrolled(p_snum, p_callNum, v_errors);
367  		 if (v_errors is null) then --checks to make sure was actually enrolled in course
368  		     --num3
369  		     alreadyGraded(p_snum, p_callnum, v_errors);
370  		     if (v_errors is null) then
371  			 dropCourse(p_snum, p_callnum, v_errors);
372  		     else
373  			 dbms_output.put_line(v_errors);
374  		     end if;
375  		 else
376  		     dbms_output.put_line(v_errors);
377  		 end if;
378  	     else
379  		 dbms_output.put_line(v_errors);
380  	     end if;
381  	 end;
382  
383  end enroll;
384  /

Package body created.

SQL> show errors;
No errors.
SQL> 
SQL> begin
  2  	 Enroll.dropme(107, 10110);
  3  	 --update enrollments set grade = null where snum = 107 and callnum = 10110;
  4  
  5  end;
  6  /
waitlist count for course is 3                                                  
trying to add... 109 10110                                                      
trying to add... 110 10110                                                      
trying to add... 102 10110                                                      

PL/SQL procedure successfully completed.

SQL> 
SQL> spool off;
