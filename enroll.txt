SQL> 
SQL> set serveroutput on
SQL> set echo on
SQL> 
SQL> --Jonathan Hand
SQL> --IS 480
SQL> --Final Project
SQL> 
SQL> create or replace Package Enroll as
  2  --just addme and drop me in spec
  3  --procedure DropMe
  4  
  5  	 procedure AddMe
  6  	     (p_snum students.snum%type,
  7  	     p_CallNum schClasses.callnum%type);
  8  
  9  end Enroll;
 10  /

Package created.

SQL> show errors;
No errors.
SQL> create or replace Package body Enroll as
  2  	 procedure check_snum
  3  	     (p_snum students.snum%type,
  4  	     p_answer IN OUT varchar2) as --out keyword to let know being passed out of procedure
  5  	     v_count number;
  6  
  7  	 begin
  8  	     select count(snum) into v_count
  9  	     from students
 10  	     where snum = p_snum;
 11  	     if v_count = 0 then
 12  		 p_answer:= p_answer || 'Invalid Student Number, ';
 13  
 14  	     end if;
 15  	 end;
 16  
 17  	 PROCEDURE check_CALLNUM
 18  	     (p_callnum schclasses.callnum%type,
 19  	     p_answer IN OUT varchar2) as
 20  	     v_count number;
 21  
 22  	 begin
 23  	     select count(*) into v_count
 24  	     from schclasses
 25  	     where callnum = p_callnum;
 26  	     if v_count = 0 then
 27  		 p_answer := p_answer || 'Invalid Call Number, ';
 28  	     end if;
 29  	 end;
 30  
 31  
 32  	 procedure check_capacity
 33  	     (p_snum students.snum%type,
 34  	     p_callnum schClasses.callnum%type,
 35  	     p_answer IN OUT varchar2) AS
 36  	     v_capacity number(3);
 37  	     v_reserved number(3);
 38  
 39  	 begin
 40  	     select sch.capacity into v_capacity
 41  	     from schClasses sch
 42  	     where p_callnum = sch.callnum;
 43  
 44  	     select count(e.callnum) into v_reserved
 45  	     from enrollments e, schClasses sch
 46  	     where sch.callnum = e.callnum and e.callnum = p_callnum;
 47  
 48  	     if (v_capacity <= v_reserved) then
 49  		 p_answer := p_answer || 'Class too full, ';
 50  	     end if;
 51  	 end;
 52  
 53  
 54  	 procedure check_15hr
 55  	     (p_snum varchar2, p_callNum varchar2, p_answer IN OUT varchar2) as
 56  	     v_stuStanding number;
 57  	     v_courseStanding number;
 58  	     v_creditEnrolled number;
 59  	     v_creditWant number;
 60  	 begin
 61  	 /*
 62  	 --this is for comparing standing TODO: Take out later
 63  	     select standing into v_stuStanding
 64  	     from students
 65  	     where sNum = p_snum;
 66  
 67  	     select standing into v_courseStanding
 68  	     from schclasses s, courses c
 69  	     where p_callNum = s.callnum and c.dept=s.dept and c.cnum = s.cnum;
 70  */
 71  	     select nvl(sum(c.CRHR), 0) into v_creditEnrolled
 72  	     from courses c, enrollments e, schclasses s
 73  	     where c.dept=s.dept and c.cnum = s.cnum and e.callnum = s.callnum and e.snum = p_snum;
 74  
 75  	     select c.crhr into v_creditWant
 76  	     from courses c, schclasses s
 77  	     where p_callnum = s.callnum and c.dept=s.dept and c.cnum = s.cnum;
 78  
 79  	     if (v_creditEnrolled + v_creditWant) > 15 then
 80  		 p_answer := p_answer || 'Too many units to register, ';
 81  	     end if;
 82  	 end;
 83  
 84  	 procedure doubleEnrollment
 85  	     (p_snum varchar2, p_callNum varchar2, p_error IN OUT varchar2) as
 86  	     v_enrDept varchar2(10);
 87  	     v_enrCnum varchar2(10);
 88  
 89  	     cursor cur_class is
 90  		 select s.callNum, s.dept, s.cnum, s.section
 91  		 from schClasses s, enrollments e
 92  		 where e.snum = p_snum and s.callnum = e.callnum;
 93  
 94  	 begin
 95  	     select dept into v_enrDept
 96  	     from schClasses
 97  	     where callnum = p_callNum;
 98  
 99  	     select Cnum into v_enrCnum
100  	     from schClasses
101  	     where callnum = p_callNum;
102  
103  
104  	     for eachClass in cur_class loop
105  		 if (v_enrDept = eachClass.dept and v_enrCnum = eachClass.Cnum) then
106  		     p_error := p_error || 'Enrolled in another section already, ';
107  		     exit;
108  		 end if;
109  	     end loop;
110  	 end;
111  
112  	 procedure repeatEnrollment
113  	     (p_snum varchar2, p_callnum varchar2, p_error IN OUT varchar2) as
114  
115  	     cursor cur_enr is
116  		 select s.callNum, e.snum
117  		 from schClasses s, enrollments e
118  		 where e.snum = p_snum and s.callnum = e.callNum;
119  
120  	 begin
121  	     for eachEnr in cur_enr loop
122  		 if (eachEnr.callNum = p_callNum) then
123  		     p_error := p_error || 'Repeat Enrollment, ';
124  		     exit;
125  		 end if;
126  	     end loop;
127  	 end;
128  
129  	 procedure AddMe
130  	 (p_snum students.snum%type,
131  	 p_CallNum schClasses.callnum%type) as
132  	 v_snumValid varchar2(20);
133  	 v_callValid varchar2(20);
134  	 v_errors varchar2(1000);
135  
136  	 begin
137  	     --num1
138  	     check_snum(p_snum, v_errors); --check valid student number
139  	     check_callnum(p_CallNum, v_errors); --check valid call number
140  	     if (v_errors is null) then
141  		 --TODO: num2
142  		 repeatEnrollment(p_snum, p_callnum, v_errors);
143  		     --check enrollments if snum already enrolled in callnum (past or present)
144  		 --num3
145  		 doubleEnrollment(p_snum, p_callNum, v_errors);
146  		     --cursor to loop through all of enrollments where snum = student.snum
147  		     --for each record:
148  			 --check schclasses.dept and cnum does not match p_callnum dept and cnum
149  			 --if matches, add to v_error message
150  		 --num4
151  		 check_15hr(p_snum, p_callNum, v_errors); --check enrolling will not exceed 15 credits for student
152  		 --TODO: num5
153  		     --select standing from students, compare to course want to enroll standing (join courses and schclasses)
154  		 --TODO: num6
155  		     --select standing from students
156  		     --if standing 3 or 4 then
157  			 --check students.major not null
158  			 --if major null
159  			     --error
160  		 --TODO: num7
161  		 check_capacity(p_snum, p_callnum, v_errors);
162  		 --TODO: num8
163  		     --if v_errors is null then
164  			 --if class capacity full
165  			     --check if stunum on waitlist table
166  			     --num9
167  				 --if not on waitlist with that call num then
168  				     --insert into waitlist table
169  				     --print stu num is now on wait list
170  				 --else
171  				     --print you're already waitlisted for that
172  		 if (v_errors is null) then
173  		     insert into enrollments (snum, callnum) values (p_snum, p_callnum);
174  		     dbms_output.put_line('Successfully Enrolled!');
175  		     commit;
176  		 else
177  		     dbms_output.put_line(v_errors);
178  		 end if;
179  	     else --num1: if snum and/or callnum invalid, skip to here
180  		 dbms_output.put_line(v_errors); --skip rest of program and print errors
181  	     end if;
182  	 end;
183  
184  end enroll;
185  /

Package body created.

SQL> show errors;
No errors.
SQL> 
SQL> begin
  2  	 Enroll.addme(101, 10110);
  3  	 Enroll.addme(106, 10115);
  4  
  5  end;
  6  /
Repeat Enrollment, Enrolled in another section already,                         
Successfully Enrolled!                                                          

PL/SQL procedure successfully completed.

SQL> 
SQL> spool off;
