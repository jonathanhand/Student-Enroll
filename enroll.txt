SQL> 
SQL> set serveroutput on
SQL> set echo on
SQL> 
SQL> --Jonathan Hand
SQL> --IS 480
SQL> --Final Project
SQL> 
SQL> create or replace Package Enroll as
  2  --just addme and drop me in spec
  3  --procedure DropMe
  4  
  5  	 procedure AddMe
  6  	     (p_snum students.snum%type,
  7  	     p_CallNum schClasses.callnum%type,
  8  	     p_errorMsg OUT varchar2);
  9  	 procedure DropMe
 10  	     (p_snum students.snum%type,
 11  	     p_CallNum schClasses.callnum%type);
 12  
 13  end Enroll;
 14  /

Package created.

SQL> show errors;
No errors.
SQL> create or replace Package body Enroll as
  2  -----------------------------------ADD ME PROCEDURES--------------------------------
  3  	 procedure check_snum
  4  	     (p_snum students.snum%type,
  5  	     p_answer IN OUT varchar2) as --out keyword to let know being passed out of procedure
  6  	     v_count number;
  7  
  8  	 begin
  9  	     select count(snum) into v_count
 10  	     from students
 11  	     where snum = p_snum;
 12  	     if v_count = 0 then
 13  		 p_answer:= p_answer || 'Invalid Student Number, ';
 14  
 15  	     end if;
 16  	 end;
 17  
 18  	 PROCEDURE check_CALLNUM
 19  	     (p_callnum schclasses.callnum%type,
 20  	     p_answer IN OUT varchar2) as
 21  	     v_count number;
 22  
 23  	 begin
 24  	     select count(*) into v_count
 25  	     from schclasses
 26  	     where callnum = p_callnum;
 27  	     if v_count = 0 then
 28  		 p_answer := p_answer || 'Invalid Call Number, ';
 29  	     end if;
 30  	 end;
 31  
 32  	 procedure check_15hr
 33  	     (p_snum students.snum%type,
 34  	     p_CallNum schClasses.callnum%type, p_answer IN OUT varchar2) as
 35  	     v_stuStanding number;
 36  	     v_courseStanding number;
 37  	     v_creditEnrolled number;
 38  	     v_creditWant number;
 39  	 begin
 40  
 41  	     select nvl(sum(c.CRHR), 0) into v_creditEnrolled
 42  	     from courses c, enrollments e, schclasses s
 43  	     where c.dept=s.dept and c.cnum = s.cnum and e.callnum = s.callnum and e.snum = p_snum;
 44  
 45  	     select c.crhr into v_creditWant
 46  	     from courses c, schclasses s
 47  	     where p_callnum = s.callnum and c.dept=s.dept and c.cnum = s.cnum;
 48  
 49  	     if (v_creditEnrolled + v_creditWant) > 15 then
 50  		 p_answer := p_answer || 'Too many units to register, ';
 51  	     end if;
 52  	 end;
 53  
 54  	 procedure doubleEnrollment
 55  	     (p_snum students.snum%type,
 56  	     p_CallNum schClasses.callnum%type, p_error IN OUT varchar2) as
 57  	     v_enrDept varchar2(10);
 58  	     v_enrCnum varchar2(10);
 59  
 60  	     cursor cur_class is
 61  		 select s.callNum, s.dept, s.cnum, s.section
 62  		 from schClasses s, enrollments e
 63  		 where e.snum = p_snum and s.callnum = e.callnum;
 64  
 65  	 begin
 66  	     select dept into v_enrDept
 67  	     from schClasses
 68  	     where callnum = p_callNum;
 69  
 70  	     select Cnum into v_enrCnum
 71  	     from schClasses
 72  	     where callnum = p_callNum;
 73  
 74  
 75  	     for eachClass in cur_class loop
 76  		 if (v_enrDept = eachClass.dept and v_enrCnum = eachClass.Cnum) then
 77  		     p_error := p_error || 'Enrolled in another section already, ';
 78  		     exit;
 79  		 end if;
 80  	     end loop;
 81  	 end;
 82  
 83  	 procedure repeatEnrollment
 84  	     (p_snum students.snum%type,
 85  	     p_CallNum schClasses.callnum%type, p_error IN OUT varchar2) as
 86  
 87  	     cursor cur_enr is
 88  		 select s.callNum, e.snum
 89  		 from schClasses s, enrollments e
 90  		 where e.snum = p_snum and s.callnum = e.callNum;
 91  
 92  	 begin
 93  	     for eachEnr in cur_enr loop
 94  		 if (eachEnr.callNum = p_callNum) then
 95  		     p_error := p_error || 'Repeat Enrollment, ';
 96  		     exit;
 97  		 end if;
 98  	     end loop;
 99  	 end;
100  
101  	 --select standing from students, compare to course want to enroll standing
102  	 --(join courses and schclasses)
103  	 procedure standingRequirement
104  	     (p_snum students.snum%type,
105  	     p_CallNum schClasses.callnum%type, p_error IN OUT varchar2) as
106  	     v_stuStanding number(1);
107  	     v_courseStanding number(1);
108  
109  	 begin
110  	     select standing into v_stuStanding
111  	     from students
112  	     where students.snum = p_snum;
113  
114  	     select c.standing into v_courseStanding
115  	     from courses c, schClasses sch
116  	     where sch.callnum = p_callNum and sch.Dept = c.Dept and sch.Cnum = c.cNum;
117  
118  	     if v_stuStanding < v_courseStanding then
119  		 p_error := p_error || 'Student standing too low, ';
120  	     end if;
121  	 end;
122  
123  	 procedure undeclaredMajor
124  	     (p_snum students.snum%type,
125  	     p_CallNum schClasses.callnum%type, p_error IN OUT varchar2) as
126  	     v_stuStanding number(1);
127  	     v_stuMajor students.Major%type;
128  
129  	 begin
130  	     select standing into v_stuStanding
131  	     from students
132  	     where students.snum = p_snum;
133  
134  	     select major into v_stuMajor
135  	     from students
136  	     where students.snum = p_snum;
137  
138  	     if (v_stuStanding >= 3) then
139  		 if (v_stuMajor is null) then
140  		     p_error := p_error || 'Need to declare major to enroll, ';
141  		 end if;
142  	     end if;
143  
144  	 end;
145  
146  	 procedure check_capacity
147  	     (p_snum students.snum%type,
148  	     p_callnum schClasses.callnum%type,
149  	     p_answer IN OUT varchar2,
150  	     p_full IN OUT boolean) AS
151  	     v_capacity number(3);
152  	     v_reservedG number(3);
153  	     v_reservedN number(3);
154  	     v_reserved number(3);
155  
156  	 begin
157  	     select sch.capacity into v_capacity
158  	     from schClasses sch
159  	     where p_callnum = sch.callnum;
160  
161  	     select count(e.callnum) into v_reservedG
162  	     from enrollments e, schClasses sch
163  	     where sch.callnum = e.callnum and e.callnum = p_callnum and e.grade != 'W';
164  
165  	     select count(e.callnum) into v_reservedN
166  	     from enrollments e, schClasses sch
167  	     where sch.callnum = e.callnum and e.callnum = p_callnum and e.grade is null;
168  
169  	     v_reserved := v_reservedG + v_reservedN;
170  	     dbms_output.put_line('RESERVED IS: ' || v_reserved);
171  	     if (v_reserved >= v_capacity) then
172  		 p_answer := p_answer || 'Class is full, ';
173  		 p_full := true;
174  	     end if;
175  	 end;
176  
177  	 procedure checkWaitlist
178  	     (p_snum students.snum%type,
179  	     p_callnum schClasses.callnum%type,
180  	     p_answer IN OUT varchar2,
181  	     p_waitlisted IN OUT boolean) as
182  	     v_onWaitList number(1);
183  
184  	 begin
185  	     p_waitListed := false;
186  	     select count(snum) into v_onWaitList
187  	     from waitlist
188  	     where snum = p_snum and callnum = p_callnum;
189  
190  	     if (v_onWaitList > 0) then
191  		 p_waitlisted := true;
192  		 dbms_output.put_line('Already on the waitlist for course number ' || p_callNum || '.');
193  	     end if;
194  	 end;
195  
196  	 procedure addToWaitList
197  	     (p_snum students.snum%type,
198  	     p_callnum schClasses.callnum%type) as
199  	 begin
200  	     insert into waitlist values (p_snum, p_callnum, (select current_timestamp from dual));
201  	     dbms_output.put_line('Student number ' || p_snum || ' is now on the waiting list for class number ' || p_callNum || '.');
202  	 end;
203  
204  
205  ---------------------------ADD ME MAIN---------------------------------------------------
206  	 procedure AddMe
207  	 (p_snum students.snum%type,
208  	 p_CallNum schClasses.callnum%type,
209  	 p_errorMsg OUT varchar2) as
210  	 v_errors varchar2(1000);
211  	 v_full boolean;
212  	 v_waitlisted boolean;
213  
214  	 begin
215  	     --num1
216  	     check_snum(p_snum, v_errors); --check valid student number
217  	     check_callnum(p_CallNum, v_errors); --check valid call number
218  	     if (v_errors is null) then
219  		 --num2
220  		 repeatEnrollment(p_snum, p_callnum, v_errors);
221  		     --check enrollments if snum already enrolled in callnum (past or present)
222  		 --num3
223  		 doubleEnrollment(p_snum, p_callNum, v_errors);
224  		     --cursor to loop through all of enrollments where snum = student.snum
225  		     --for each record:
226  			 --check schclasses.dept and cnum does not match p_callnum dept and cnum
227  			 --if matches, add to v_error message
228  		 --num4
229  		 check_15hr(p_snum, p_callNum, v_errors); --check enrolling will not exceed 15 credits for student
230  		 --num5
231  		     --select standing from students, compare to course want to enroll standing (join courses and schclasses)
232  		 standingRequirement(p_snum, p_callNum, v_errors);
233  		 --num6
234  		 undeclaredMajor(p_snum, p_callNum, v_errors);
235  		     --select standing from students
236  		     --if standing 3 or 4 then
237  			 --check students.major not null
238  			 --if major null
239  			     --error
240  		 --num7
241  		 --if (v_errors is null) then
242  
243  
244  		 --TODO: num8
245  
246  			     --check if stunum on waitlist table
247  			     --num9
248  				 --if not on waitlist with that call num then
249  				     --insert into waitlist table
250  				     --print stu num is now on wait list
251  				 --else
252  				     --print you're already waitlisted for that
253  
254  		 --end if;
255  		-- if (v_errors is not null) then
256  		     --checkWaitlist
257  
258  		 if (v_errors is null) then
259  		 check_capacity(p_snum, p_callnum, v_errors, v_full);
260  		     if(v_full = true) then
261  			 --num8
262  			 checkWaitlist(p_snum, p_callnum, v_errors, v_waitlisted);
263  			 if (v_waitlisted = false) then
264  			     addToWaitList(p_snum, p_callNum);
265  			 end if;
266  		     else
267  			 insert into enrollments (snum, callnum) values (p_snum, p_callnum);
268  			 dbms_output.put_line('Successfully Enrolled ' || p_snum || ' in course number ' || p_callnum || '.');
269  			 commit;
270  		     end if;
271  		 else
272  		     dbms_output.put_line(v_errors);
273  		 end if;
274  	     else --num1: if snum and/or callnum invalid, skip to here
275  		 dbms_output.put_line(v_errors); --skip rest of program and print errors
276  	     end if;
277  	 end;
278  ----------------------DROP ME PROCEDURES-----------------------------------------------------------
279  	 procedure notEnrolled
280  	     (p_snum students.snum%type,
281  	     p_callnum schClasses.callnum%type,
282  	     p_errors IN OUT varchar2) as
283  	     v_enrollmentCount number(1);
284  	 begin
285  	     select count(snum) into v_enrollmentCount
286  	     from enrollments
287  	     where snum = p_snum and callNum = p_callNum; --add to not count 'W', because means dropped, so they can retake
288  
289  	     if (v_enrollmentCount != 1) then
290  		 p_errors := p_errors || 'Not currently enrolled in that course, ';
291  	     end if;
292  	 end;
293  
294  	 procedure alreadyGraded
295  	     (p_snum students.snum%type,
296  	     p_callnum schClasses.callnum%type,
297  	     p_errors IN OUT varchar2) as
298  	     v_grade varchar(1);
299  
300  	 begin
301  	     select grade into v_grade
302  	     from enrollments
303  	     where snum = p_snum and callnum = p_callnum;
304  
305  	     if (v_grade is not null) then
306  	     p_errors := p_errors || 'Grade already inputted cannot drop, ';
307  	     end if;
308  	 end;
309  
310  	 procedure dropCourse
311  	     (p_snum students.snum%type,
312  	     p_callnum schClasses.callnum%type,
313  	     p_errors IN OUT varchar2) as
314  	     v_waitListNum number(3);
315  	     v_addError varchar2(1000);
316  
317  		 cursor cur_waitlist is
318  		 select w.snum, w.callnum, waitlistTime
319  		 from waitlist w
320  		 where w.callnum = p_callnum
321  		 order by waitlistTime asc;
322  
323  	 begin
324  	     update enrollments
325  	     set grade = 'W'
326  	     where snum = p_snum and callnum = p_callnum;
327  	     dbms_output.put_line('Student ' || p_snum || ' has been dropped from course ' || p_callnum || '.');
328  	     commit;
329  
330  	     select count(snum) into v_waitlistNum
331  	     from waitlist
332  	     where callnum = p_callnum;
333  
334  	     if (v_waitlistNum > 0) then
335  		 for student in cur_waitList loop
336  		     v_addError := null;
337  		     dbms_output.put_line('Trying to add ' || student.snum || ' in course ' || student.callnum || '...');
338  		     addme(student.snum,student.callnum, v_addError);
339  		     if (v_addError is null) then
340  			 delete
341  			 from waitlist
342  			 where snum = student.snum and callnum = student.callnum;
343  			 dbms_output.put_line('They have been removed from the waitlist.');
344  		       exit;
345  		     end if;
346  		 end loop;
347  	     end if;
348  	 end;
349  ---------------------------DROP ME MAIN--------------------------------------------
350  	 procedure DropMe
351  	     (p_snum students.snum%type,
352  	     p_CallNum schClasses.callnum%type) as
353  	     v_errors varchar2(1000);
354  
355  	 begin
356  	     --num1
357  	     check_snum(p_snum, v_errors); --check valid student number
358  	     check_callnum(p_CallNum, v_errors); --check valid call number
359  	     if (v_errors is null) then
360  	     --num2
361  		 notEnrolled(p_snum, p_callNum, v_errors);
362  		 if (v_errors is null) then --checks to make sure was actually enrolled in course
363  		     --num3
364  		     alreadyGraded(p_snum, p_callnum, v_errors);
365  		     if (v_errors is null) then
366  			 dropCourse(p_snum, p_callnum, v_errors);
367  		     else
368  			 dbms_output.put_line(v_errors);
369  		     end if;
370  		 else
371  		     dbms_output.put_line(v_errors);
372  		 end if;
373  	     else
374  		 dbms_output.put_line(v_errors);
375  	     end if;
376  	 end;
377  
378  end enroll;
379  /

Package body created.

SQL> show errors;
No errors.
SQL> 
SQL> begin
  2  	 Enroll.dropme(107, 10110);
  3  end;
  4  /
Student 107 has been dropped from course 10110.                                 
Trying to add 109 in course 10110...                                            
RESERVED IS: 4                                                                  
Successfully Enrolled 109 in course number 10110.                               
They have been removed from the waitlist.                                       

PL/SQL procedure successfully completed.

SQL> 
SQL> spool off;
