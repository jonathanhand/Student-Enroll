SQL> set echo on
SQL> set serveroutput on
SQL> --Jonathan Hand
SQL> --IS 480
SQL> --Final Project
SQL> 
SQL> /* ---------------
>    Create table structure for IS 480 project
SQL> 	--------------- */
SQL> 
SQL> drop table enrollments;

Table dropped.

SQL> drop table prereq;

Table dropped.

SQL> drop table waitlist;

Table dropped.

SQL> drop table schclasses;

Table dropped.

SQL> drop table courses;

Table dropped.

SQL> drop table students;

Table dropped.

SQL> drop table majors;

Table dropped.

SQL> 
SQL> 
SQL> -----
SQL> -----
SQL> 
SQL> 
SQL> create table MAJORS
  2  	     (major varchar2(3) Primary key,
  3  	     mdesc varchar2(30));

Table created.

SQL> insert into majors values ('ACC','Accounting');

1 row created.

SQL> insert into majors values ('FIN','Finance');

1 row created.

SQL> insert into majors values ('IS','Information Systems');

1 row created.

SQL> insert into majors values ('MKT','Marketing');

1 row created.

SQL> 
SQL> create table STUDENTS
  2  	     (snum varchar2(3) primary key,
  3  	     sname varchar2(10),
  4  	     standing number(1),
  5  	     major varchar2(3) constraint fk_students_major references majors(major),
  6  	     gpa number(2,1),
  7  	     major_gpa number(2,1));

Table created.

SQL> 
SQL> insert into students values ('101','Andy',3,'IS',2.8,3.2);

1 row created.

SQL> insert into students values ('102','Betty',2,null,3.2,null);

1 row created.

SQL> insert into students values ('103','Cindy',3,'IS',2.5,3.5);

1 row created.

SQL> insert into students values ('104','David',2,'FIN',3.3,3.0);

1 row created.

SQL> insert into students values ('105','Ellen',1,null,2.8,null);

1 row created.

SQL> insert into students values ('106','Frank',3,'MKT',3.1,2.9);

1 row created.

SQL> insert into students values ('107','Cindy',3,'IS',2.5,3.5);

1 row created.

SQL> insert into students values ('108','Frank',3,'IS',2.5,3.5);

1 row created.

SQL> insert into students values ('109','Betty',3,'MKT',2.5,3.5);

1 row created.

SQL> insert into students values ('110','Cindy',3,'IS',2.5,3.5);

1 row created.

SQL> insert into students values ('111','Frank',3,null,2.5,3.5);

1 row created.

SQL> insert into students values ('112','Cindy',3,'FIN',2.5,3.5);

1 row created.

SQL> insert into students values ('113','Frank',3,'IS',2.5,3.5);

1 row created.

SQL> insert into students values ('114','David',3,null,2.5,3.5);

1 row created.

SQL> insert into students values ('115','David',3,'IS',2.5,3.5);

1 row created.

SQL> 
SQL> create table COURSES
  2  	     (dept varchar2(3) constraint fk_courses_dept references majors(major),
  3  	     cnum varchar2(3),
  4  	     ctitle varchar2(30),
  5  	     crhr number(3),
  6  	     standing number(1),
  7  	     primary key (dept,cnum));

Table created.

SQL> 
SQL> insert into courses values ('IS','300','Intro to MIS',3,2);

1 row created.

SQL> insert into courses values ('IS','301','Business Communicatons',3,2);

1 row created.

SQL> insert into courses values ('IS','310','Statistics',3,2);

1 row created.

SQL> insert into courses values ('IS','340','Programming',3,3);

1 row created.

SQL> insert into courses values ('IS','380','Database',3,3);

1 row created.

SQL> insert into courses values ('IS','385','Systems',3,3);

1 row created.

SQL> insert into courses values ('IS','480','Adv Database',3,4);

1 row created.

SQL> 
SQL> create table SCHCLASSES (
  2  	     callnum number(5) primary key,
  3  	     year number(4),
  4  	     semester varchar2(3),
  5  	     dept varchar2(3),
  6  	     cnum varchar2(3),
  7  	     section number(2),
  8  	     capacity number(3));

Table created.

SQL> 
SQL> alter table schclasses
  2  	     add constraint fk_schclasses_dept_cnum foreign key
  3  	     (dept, cnum) references courses (dept,cnum);

Table altered.

SQL> 
SQL> insert into schclasses values (10110,2014,'Fa','IS','300',1,5);

1 row created.

SQL> insert into schclasses values (10115,2014,'Fa','IS','300',2,118);

1 row created.

SQL> insert into schclasses values (10120,2014,'Fa','IS','300',3,5);

1 row created.

SQL> insert into schclasses values (10125,2014,'Fa','IS','301',1,35);

1 row created.

SQL> insert into schclasses values (10130,2014,'Fa','IS','301',2,35);

1 row created.

SQL> insert into schclasses values (10135,2014,'Fa','IS','310',1,35);

1 row created.

SQL> insert into schclasses values (10140,2014,'Fa','IS','310',2,35);

1 row created.

SQL> insert into schclasses values (10145,2014,'Fa','IS','340',1,30);

1 row created.

SQL> insert into schclasses values (10150,2014,'Fa','IS','380',1,33);

1 row created.

SQL> insert into schclasses values (10155,2014,'Fa','IS','385',1,35);

1 row created.

SQL> insert into schclasses values (10160,2014,'Fa','IS','480',1,35);

1 row created.

SQL> 
SQL> create table PREREQ
  2  	     (dept varchar2(3),
  3  	     cnum varchar2(3),
  4  	     pdept varchar2(3),
  5  	     pcnum varchar2(3),
  6  	     primary key (dept, cnum, pdept, pcnum));

Table created.

SQL> alter table Prereq
  2  	     add constraint fk_prereq_dept_cnum foreign key
  3  	     (dept, cnum) references courses (dept,cnum);

Table altered.

SQL> alter table Prereq
  2  	     add constraint fk_prereq_pdept_pcnum foreign key
  3  	     (pdept, pcnum) references courses (dept,cnum);

Table altered.

SQL> 
SQL> insert into prereq values ('IS','380','IS','300');

1 row created.

SQL> insert into prereq values ('IS','380','IS','301');

1 row created.

SQL> insert into prereq values ('IS','380','IS','310');

1 row created.

SQL> insert into prereq values ('IS','385','IS','310');

1 row created.

SQL> insert into prereq values ('IS','340','IS','300');

1 row created.

SQL> insert into prereq values ('IS','480','IS','380');

1 row created.

SQL> 
SQL> create table ENROLLMENTS (
  2  	     snum varchar2(3) constraint fk_enrollments_snum references students(snum),
  3  	     callnum number(5) constraint fk_enrollments_callnum references schclasses(callnum),
  4  	     grade varchar2(2),
  5  	     primary key (snum, callnum));

Table created.

SQL> 
SQL> insert into enrollments values (101,10110,'A');

1 row created.

SQL> insert into enrollments values (102,10125,null);

1 row created.

SQL> insert into enrollments values (103,10120,'A');

1 row created.

SQL> insert into enrollments values (101,10125,null);

1 row created.

SQL> insert into enrollments values (102,10130,null);

1 row created.

SQL> insert into enrollments values (104,10110,null);

1 row created.

SQL> insert into enrollments values (105,10110,null);

1 row created.

SQL> insert into enrollments values (106,10110,'B');

1 row created.

SQL> insert into enrollments values (107,10110,null);

1 row created.

SQL> insert into enrollments values (108,10110,'W');

1 row created.

SQL> insert into enrollments values (103,10125,null);

1 row created.

SQL> insert into enrollments values (104,10125,null);

1 row created.

SQL> insert into enrollments values (105,10130,null);

1 row created.

SQL> insert into enrollments values (104,10120,null);

1 row created.

SQL> insert into enrollments values (106,10120,null);

1 row created.

SQL> insert into enrollments values (107,10120,'B');

1 row created.

SQL> insert into enrollments values (108,10120,'C');

1 row created.

SQL> 
SQL> create table WAITLIST (
  2  	     snum varchar2(3) constraint fk_waitlist_snum references students(snum),
  3  	     callnum number(5) constraint fk_waitlist_callnum references schclasses(callnum),
  4  	     waitlistTime timestamp,
  5  	     primary key (snum, callnum));

Table created.

SQL> insert into WAITLIST values (109, 10110, '14-MAY-19 06.08.52.332000 PM');

1 row created.

SQL> insert into WAITLIST values (102, 10110, '14-MAY-19 07.15.27.830000 PM');

1 row created.

SQL> insert into WAITLIST values (110, 10110, '14-MAY-19 06.24.17.298000 PM');

1 row created.

SQL> 
SQL> commit;

Commit complete.

SQL> 
SQL> ------------------------ENROLL PACKAGE------------------------------------------------------
SQL> create or replace Package Enroll as
  2  --addme and dropme in spec
  3  
  4  	 procedure AddMe
  5  	     (p_snum students.snum%type,
  6  	     p_CallNum schClasses.callnum%type,
  7  	     p_errorMsg OUT varchar2);
  8  	 procedure DropMe
  9  	     (p_snum students.snum%type,
 10  	     p_CallNum schClasses.callnum%type);
 11  
 12  end Enroll;
 13  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace Package body Enroll as
  2  -----------------------------------ADD ME PROCEDURES--------------------------------
  3  	 procedure check_snum
  4  	     --checks to make sure snum is valid
  5  	     (p_snum students.snum%type,
  6  	     p_answer OUT varchar2) as
  7  	     v_count number;
  8  
  9  	 begin
 10  	     select count(snum) into v_count
 11  	     from students
 12  	     where snum = p_snum;
 13  	     if v_count = 0 then
 14  		 p_answer:= p_answer || 'Invalid Student Number, ';
 15  
 16  	     end if;
 17  	 end;
 18  
 19  	 PROCEDURE check_CALLNUM
 20  	     --checks to make sure callnum is valid
 21  	     (p_callnum schclasses.callnum%type,
 22  	     p_answer IN OUT varchar2) as
 23  	     v_count number;
 24  
 25  	 begin
 26  	     select count(*) into v_count
 27  	     from schclasses
 28  	     where callnum = p_callnum;
 29  	     if v_count = 0 then
 30  		 p_answer := p_answer || 'Invalid Call Number, ';
 31  	     end if;
 32  	 end;
 33  
 34  	 procedure check_15hr
 35  	     --checks to make sure student will not exceed 15 crhr
 36  	     (p_snum students.snum%type,
 37  	     p_CallNum schClasses.callnum%type, p_answer IN OUT varchar2) as
 38  	     v_stuStanding number;
 39  	     v_courseStanding number;
 40  	     v_creditEnrolled number;
 41  	     v_creditWant number;
 42  	 begin
 43  
 44  	     select nvl(sum(c.CRHR), 0) into v_creditEnrolled
 45  	     from courses c, enrollments e, schclasses s
 46  	     where c.dept=s.dept and c.cnum = s.cnum and e.callnum = s.callnum and e.snum = p_snum;
 47  
 48  	     select c.crhr into v_creditWant
 49  	     from courses c, schclasses s
 50  	     where p_callnum = s.callnum and c.dept=s.dept and c.cnum = s.cnum;
 51  
 52  	     if (v_creditEnrolled + v_creditWant) > 15 then
 53  		 p_answer := p_answer || 'Too many units to register, ';
 54  	     end if;
 55  	 end;
 56  
 57  	 procedure doubleEnrollment
 58  	     --makes sure not enrolled in another section already
 59  	     (p_snum students.snum%type,
 60  	     p_CallNum schClasses.callnum%type, p_error IN OUT varchar2) as
 61  	     v_enrDept varchar2(10);
 62  	     v_enrCnum varchar2(10);
 63  
 64  	     cursor cur_class is
 65  		 select s.callNum, s.dept, s.cnum, s.section
 66  		 from schClasses s, enrollments e
 67  		 where e.snum = p_snum and s.callnum = e.callnum;
 68  
 69  	 begin
 70  	     select dept into v_enrDept
 71  	     from schClasses
 72  	     where callnum = p_callNum;
 73  
 74  	     select Cnum into v_enrCnum
 75  	     from schClasses
 76  	     where callnum = p_callNum;
 77  
 78  
 79  	     for eachClass in cur_class loop
 80  		 if (v_enrDept = eachClass.dept and v_enrCnum = eachClass.Cnum) then
 81  		     p_error := p_error || 'Enrolled in another section already, ';
 82  		     exit;
 83  		 end if;
 84  	     end loop;
 85  	 end;
 86  
 87  	 procedure repeatEnrollment
 88  	     --makes sure not enrolled in same callnum already
 89  	     (p_snum students.snum%type,
 90  	     p_CallNum schClasses.callnum%type, p_error IN OUT varchar2) as
 91  
 92  	     cursor cur_enr is
 93  		 select s.callNum, e.snum
 94  		 from schClasses s, enrollments e
 95  		 where e.snum = p_snum and s.callnum = e.callNum;
 96  
 97  	 begin
 98  	     for eachEnr in cur_enr loop
 99  		 if (eachEnr.callNum = p_callNum) then
100  		     p_error := p_error || 'Repeat Enrollment, ';
101  		     exit;
102  		 end if;
103  	     end loop;
104  	 end;
105  
106  	 procedure standingRequirement
107  	     --checks standing, makes sure high enough standing to take course
108  	     (p_snum students.snum%type,
109  	     p_CallNum schClasses.callnum%type, p_error IN OUT varchar2) as
110  	     v_stuStanding number(1);
111  	     v_courseStanding number(1);
112  
113  	 begin
114  	     select standing into v_stuStanding
115  	     from students
116  	     where students.snum = p_snum;
117  
118  	     select c.standing into v_courseStanding
119  	     from courses c, schClasses sch
120  	     where sch.callnum = p_callNum and sch.Dept = c.Dept and sch.Cnum = c.cNum;
121  
122  	     if v_stuStanding < v_courseStanding then
123  		 p_error := p_error || 'Student standing too low, ';
124  	     end if;
125  	 end;
126  
127  	 procedure undeclaredMajor
128  	     --checks to see if major is undeclared. If standing 3+ then cannot enroll as undeclared
129  	     (p_snum students.snum%type,
130  	     p_CallNum schClasses.callnum%type, p_error IN OUT varchar2) as
131  	     v_stuStanding number(1);
132  	     v_stuMajor students.Major%type;
133  
134  	 begin
135  	     select standing into v_stuStanding
136  	     from students
137  	     where students.snum = p_snum;
138  
139  	     select major into v_stuMajor
140  	     from students
141  	     where students.snum = p_snum;
142  
143  	     if (v_stuStanding >= 3) then
144  		 if (v_stuMajor is null) then
145  		     p_error := p_error || 'Need to declare major to enroll, ';
146  		 end if;
147  	     end if;
148  
149  	 end;
150  
151  	 procedure check_capacity
152  	     --checks to see if class is full
153  	     (p_snum students.snum%type,
154  	     p_callnum schClasses.callnum%type,
155  	     p_answer IN OUT varchar2,
156  	     p_full IN OUT boolean) AS
157  	     v_capacity number(3);
158  	     v_reservedG number(3);
159  	     v_reservedN number(3);
160  	     v_reserved number(3);
161  
162  	 begin
163  	     select sch.capacity into v_capacity
164  	     from schClasses sch
165  	     where p_callnum = sch.callnum;
166  
167  	     select count(e.callnum) into v_reservedG
168  	     from enrollments e, schClasses sch
169  	     where sch.callnum = e.callnum and e.callnum = p_callnum and e.grade != 'W';
170  
171  	     select count(e.callnum) into v_reservedN
172  	     from enrollments e, schClasses sch
173  	     where sch.callnum = e.callnum and e.callnum = p_callnum and e.grade is null;
174  
175  	     v_reserved := v_reservedG + v_reservedN;
176  	     if (v_reserved >= v_capacity) then
177  		 p_answer := p_answer || 'Class is full, ';
178  		 p_full := true;
179  	     end if;
180  	 end;
181  
182  	 procedure checkWaitlist
183  	     --checks to see if snum is already waitlisted for that callnum
184  	     (p_snum students.snum%type,
185  	     p_callnum schClasses.callnum%type,
186  	     p_answer IN OUT varchar2,
187  	     p_waitlisted IN OUT boolean) as
188  	     v_onWaitList number(1);
189  
190  	 begin
191  	     p_waitListed := false;
192  	     select count(snum) into v_onWaitList
193  	     from waitlist
194  	     where snum = p_snum and callnum = p_callnum;
195  
196  	     if (v_onWaitList > 0) then
197  		 p_waitlisted := true;
198  		 dbms_output.put_line('Already on the waitlist for course number ' || p_callNum || '.');
199  	     end if;
200  	 end;
201  
202  	 procedure addToWaitList
203  	     --adds student to waitlist
204  	     (p_snum students.snum%type,
205  	     p_callnum schClasses.callnum%type) as
206  	 begin
207  	     insert into waitlist values (p_snum, p_callnum, (select current_timestamp from dual));
208  	     dbms_output.put_line('Student number ' || p_snum || ' is now on the waiting list for class number ' || p_callNum || '.');
209  	 end;
210  
211  
212  ---------------------------ADD ME MAIN---------------------------------------------------
213  	 procedure AddMe
214  	 (p_snum students.snum%type,
215  	 p_CallNum schClasses.callnum%type,
216  	 p_errorMsg OUT varchar2) as
217  	 v_errors varchar2(1000);
218  	 v_full boolean;
219  	 v_waitlisted boolean;
220  
221  	 begin
222  	     --num1
223  	     check_snum(p_snum, v_errors); --check valid student number
224  	     check_callnum(p_CallNum, v_errors); --check valid call number
225  	     if (v_errors is null) then
226  		 --num2
227  		 repeatEnrollment(p_snum, p_callnum, v_errors);
228  		 --num3
229  		 doubleEnrollment(p_snum, p_callNum, v_errors);
230  		 --num4
231  		 check_15hr(p_snum, p_callNum, v_errors);
232  		 --num5
233  		 standingRequirement(p_snum, p_callNum, v_errors);
234  		 --num6
235  		 undeclaredMajor(p_snum, p_callNum, v_errors);
236  		 if (v_errors is null) then
237  			     --num7
238  		 check_capacity(p_snum, p_callnum, v_errors, v_full); --if no errors can enroll, so check if class full
239  		     if(v_full = true) then --if class is full
240  			 --num8
241  			 checkWaitlist(p_snum, p_callnum, v_errors, v_waitlisted); --check if already waitlisted
242  			 if (v_waitlisted = false) then --if not already waitlisted for class then
243  			     addToWaitList(p_snum, p_callNum);
244  			 end if;
245  		     else --if not full, then can enroll student
246  			 insert into enrollments (snum, callnum) values (p_snum, p_callnum);
247  			 dbms_output.put_line('Successfully Enrolled ' || p_snum || ' in course number ' || p_callnum || '.');
248  			 commit;
249  		     end if;
250  		 else
251  		     dbms_output.put_line(v_errors);
252  		 end if;
253  	     else --num1: if snum and/or callnum invalid, skip to here
254  		 dbms_output.put_line(v_errors); --skip rest of program and print errors
255  	     end if;
256  	 end;
257  ----------------------DROP ME PROCEDURES-----------------------------------------------------------
258  	 procedure notEnrolled
259  	     (p_snum students.snum%type,
260  	     p_callnum schClasses.callnum%type,
261  	     p_errors IN OUT varchar2) as
262  	     v_enrollmentCount number(1);
263  	 begin
264  	     select count(snum) into v_enrollmentCount
265  	     from enrollments
266  	     where snum = p_snum and callNum = p_callNum; --add to not count 'W', because means dropped, so they can retake
267  
268  	     if (v_enrollmentCount != 1) then
269  		 p_errors := p_errors || 'Not currently enrolled in that course, ';
270  	     end if;
271  	 end;
272  
273  	 procedure alreadyGraded
274  	     (p_snum students.snum%type,
275  	     p_callnum schClasses.callnum%type,
276  	     p_errors IN OUT varchar2) as
277  	     v_grade varchar(1);
278  
279  	 begin
280  	     select grade into v_grade
281  	     from enrollments
282  	     where snum = p_snum and callnum = p_callnum;
283  
284  	     if (v_grade is not null) then
285  	     p_errors := p_errors || 'Grade already inputted cannot drop, ';
286  	     end if;
287  	 end;
288  
289  	 procedure dropCourse
290  	     (p_snum students.snum%type,
291  	     p_callnum schClasses.callnum%type,
292  	     p_errors IN OUT varchar2) as
293  	     v_waitListNum number(3);
294  	     v_addError varchar2(1000);
295  
296  		 cursor cur_waitlist is
297  		 select w.snum, w.callnum, waitlistTime
298  		 from waitlist w
299  		 where w.callnum = p_callnum
300  		 order by waitlistTime asc;
301  
302  	 begin
303  	     update enrollments
304  	     set grade = 'W'
305  	     where snum = p_snum and callnum = p_callnum;
306  	     dbms_output.put_line('Student ' || p_snum || ' has been dropped from course ' || p_callnum || '.');
307  	     commit;
308  
309  	     select count(snum) into v_waitlistNum
310  	     from waitlist
311  	     where callnum = p_callnum;
312  
313  	     if (v_waitlistNum > 0) then
314  		 for student in cur_waitList loop
315  		     v_addError := null;
316  		     dbms_output.put_line('Trying to add ' || student.snum || ' in course ' || student.callnum || '...');
317  		     addme(student.snum,student.callnum, v_addError);
318  		     if (v_addError is null) then
319  			 delete
320  			 from waitlist
321  			 where snum = student.snum and callnum = student.callnum;
322  			 dbms_output.put_line('They have been removed from the waitlist.');
323  		       exit;
324  		     end if;
325  		 end loop;
326  	     end if;
327  	 end;
328  ---------------------------DROP ME MAIN--------------------------------------------
329  	 procedure DropMe
330  	     (p_snum students.snum%type,
331  	     p_CallNum schClasses.callnum%type) as
332  	     v_errors varchar2(1000);
333  
334  	 begin
335  	     --num1
336  	     check_snum(p_snum, v_errors); --check valid student number
337  	     check_callnum(p_CallNum, v_errors); --check valid call number
338  	     if (v_errors is null) then
339  	     --num2
340  		 notEnrolled(p_snum, p_callNum, v_errors);
341  		 if (v_errors is null) then --checks to make sure was actually enrolled in course
342  		     --num3
343  		     alreadyGraded(p_snum, p_callnum, v_errors);
344  		     if (v_errors is null) then
345  			 dropCourse(p_snum, p_callnum, v_errors);
346  		     else
347  			 dbms_output.put_line(v_errors);
348  		     end if;
349  		 else
350  		     dbms_output.put_line(v_errors);
351  		 end if;
352  	     else
353  		 dbms_output.put_line(v_errors);
354  	     end if;
355  	 end;
356  
357  end enroll;
358  /

Package body created.

SQL> show errors;
No errors.
SQL> 
SQL> spool off;
